// Code generated by go-enum DO NOT EDIT.
// Version: example
// Revision: example
// Build Date: example
// Built By: example

//go:build example
// +build example

package example

import (
	"fmt"
	"strings"
)

const (
	// Enum32bitfieldE2P0 is a Enum32bitfield of type E2P0.
	Enum32bitfieldE2P0 Enum32bitfield = 1 << iota
	// Enum32bitfieldE2P1 is a Enum32bitfield of type E2P1.
	Enum32bitfieldE2P1
	// Enum32bitfieldE2P2 is a Enum32bitfield of type E2P2.
	Enum32bitfieldE2P2
	// Enum32bitfieldE2P3 is a Enum32bitfield of type E2P3.
	Enum32bitfieldE2P3
	// Enum32bitfieldE2P4 is a Enum32bitfield of type E2P4.
	Enum32bitfieldE2P4
	// Enum32bitfieldE2P5 is a Enum32bitfield of type E2P5.
	Enum32bitfieldE2P5
	// Enum32bitfieldE2P6 is a Enum32bitfield of type E2P6.
	Enum32bitfieldE2P6
	// Enum32bitfieldE2P7 is a Enum32bitfield of type E2P7.
	Enum32bitfieldE2P7
	// Enum32bitfieldE2P8 is a Enum32bitfield of type E2P8.
	Enum32bitfieldE2P8
	// Enum32bitfieldE2P9 is a Enum32bitfield of type E2P9.
	Enum32bitfieldE2P9
	// Enum32bitfieldE2P10 is a Enum32bitfield of type E2P10.
	Enum32bitfieldE2P10
	// Enum32bitfieldE2P11 is a Enum32bitfield of type E2P11.
	Enum32bitfieldE2P11
	// Enum32bitfieldE2P12 is a Enum32bitfield of type E2P12.
	Enum32bitfieldE2P12
	// Enum32bitfieldE2P13 is a Enum32bitfield of type E2P13.
	Enum32bitfieldE2P13
	// Enum32bitfieldE2P14 is a Enum32bitfield of type E2P14.
	Enum32bitfieldE2P14
	// Enum32bitfieldE2P15 is a Enum32bitfield of type E2P15.
	Enum32bitfieldE2P15
	// Enum32bitfieldE2P16 is a Enum32bitfield of type E2P16.
	Enum32bitfieldE2P16
	// Enum32bitfieldE2P17 is a Enum32bitfield of type E2P17.
	Enum32bitfieldE2P17
	// Enum32bitfieldE2P18 is a Enum32bitfield of type E2P18.
	Enum32bitfieldE2P18
	// Enum32bitfieldE2P19 is a Enum32bitfield of type E2P19.
	Enum32bitfieldE2P19
	// Enum32bitfieldE2P20 is a Enum32bitfield of type E2P20.
	Enum32bitfieldE2P20
	// Enum32bitfieldE2P21 is a Enum32bitfield of type E2P21.
	Enum32bitfieldE2P21
	// Enum32bitfieldE2P22 is a Enum32bitfield of type E2P22.
	Enum32bitfieldE2P22
	// Enum32bitfieldE2P23 is a Enum32bitfield of type E2P23.
	Enum32bitfieldE2P23
	// Enum32bitfieldE2P24 is a Enum32bitfield of type E2P24.
	Enum32bitfieldE2P24
	// Enum32bitfieldE2P25 is a Enum32bitfield of type E2P25.
	Enum32bitfieldE2P25
	// Enum32bitfieldE2P26 is a Enum32bitfield of type E2P26.
	Enum32bitfieldE2P26
	// Enum32bitfieldE2P27 is a Enum32bitfield of type E2P27.
	Enum32bitfieldE2P27
	// Enum32bitfieldE2P28 is a Enum32bitfield of type E2P28.
	Enum32bitfieldE2P28
	// Enum32bitfieldE2P29 is a Enum32bitfield of type E2P29.
	Enum32bitfieldE2P29
	// Enum32bitfieldE2P30 is a Enum32bitfield of type E2P30.
	Enum32bitfieldE2P30
	// Enum32bitfieldE2P31 is a Enum32bitfield of type E2P31.
	Enum32bitfieldE2P31
)

var ErrInvalidEnum32bitfield = fmt.Errorf("not a valid Enum32bitfield, try [%s]", strings.Join(_Enum32bitfieldNames, ", "))

const _Enum32bitfieldName = "E2P0E2P1E2P2E2P3E2P4E2P5E2P6E2P7E2P8E2P9E2P10E2P11E2P12E2P13E2P14E2P15E2P16E2P17E2P18E2P19E2P20E2P21E2P22E2P23E2P24E2P25E2P26E2P27E2P28E2P29E2P30E2P31"

var _Enum32bitfieldNames = []string{
	_Enum32bitfieldName[0:4],
	_Enum32bitfieldName[4:8],
	_Enum32bitfieldName[8:12],
	_Enum32bitfieldName[12:16],
	_Enum32bitfieldName[16:20],
	_Enum32bitfieldName[20:24],
	_Enum32bitfieldName[24:28],
	_Enum32bitfieldName[28:32],
	_Enum32bitfieldName[32:36],
	_Enum32bitfieldName[36:40],
	_Enum32bitfieldName[40:45],
	_Enum32bitfieldName[45:50],
	_Enum32bitfieldName[50:55],
	_Enum32bitfieldName[55:60],
	_Enum32bitfieldName[60:65],
	_Enum32bitfieldName[65:70],
	_Enum32bitfieldName[70:75],
	_Enum32bitfieldName[75:80],
	_Enum32bitfieldName[80:85],
	_Enum32bitfieldName[85:90],
	_Enum32bitfieldName[90:95],
	_Enum32bitfieldName[95:100],
	_Enum32bitfieldName[100:105],
	_Enum32bitfieldName[105:110],
	_Enum32bitfieldName[110:115],
	_Enum32bitfieldName[115:120],
	_Enum32bitfieldName[120:125],
	_Enum32bitfieldName[125:130],
	_Enum32bitfieldName[130:135],
	_Enum32bitfieldName[135:140],
	_Enum32bitfieldName[140:145],
	_Enum32bitfieldName[145:150],
}

// Enum32bitfieldNames returns a list of possible string values of Enum32bitfield.
func Enum32bitfieldNames() []string {
	tmp := make([]string, len(_Enum32bitfieldNames))
	copy(tmp, _Enum32bitfieldNames)
	return tmp
}

// Enum32bitfieldValues returns a list of the values for Enum32bitfield
func Enum32bitfieldValues() []Enum32bitfield {
	return []Enum32bitfield{
		Enum32bitfieldE2P0,
		Enum32bitfieldE2P1,
		Enum32bitfieldE2P2,
		Enum32bitfieldE2P3,
		Enum32bitfieldE2P4,
		Enum32bitfieldE2P5,
		Enum32bitfieldE2P6,
		Enum32bitfieldE2P7,
		Enum32bitfieldE2P8,
		Enum32bitfieldE2P9,
		Enum32bitfieldE2P10,
		Enum32bitfieldE2P11,
		Enum32bitfieldE2P12,
		Enum32bitfieldE2P13,
		Enum32bitfieldE2P14,
		Enum32bitfieldE2P15,
		Enum32bitfieldE2P16,
		Enum32bitfieldE2P17,
		Enum32bitfieldE2P18,
		Enum32bitfieldE2P19,
		Enum32bitfieldE2P20,
		Enum32bitfieldE2P21,
		Enum32bitfieldE2P22,
		Enum32bitfieldE2P23,
		Enum32bitfieldE2P24,
		Enum32bitfieldE2P25,
		Enum32bitfieldE2P26,
		Enum32bitfieldE2P27,
		Enum32bitfieldE2P28,
		Enum32bitfieldE2P29,
		Enum32bitfieldE2P30,
		Enum32bitfieldE2P31,
	}
}

var _Enum32bitfieldMap = map[Enum32bitfield]string{
	Enum32bitfieldE2P0:  _Enum32bitfieldName[0:4],
	Enum32bitfieldE2P1:  _Enum32bitfieldName[4:8],
	Enum32bitfieldE2P2:  _Enum32bitfieldName[8:12],
	Enum32bitfieldE2P3:  _Enum32bitfieldName[12:16],
	Enum32bitfieldE2P4:  _Enum32bitfieldName[16:20],
	Enum32bitfieldE2P5:  _Enum32bitfieldName[20:24],
	Enum32bitfieldE2P6:  _Enum32bitfieldName[24:28],
	Enum32bitfieldE2P7:  _Enum32bitfieldName[28:32],
	Enum32bitfieldE2P8:  _Enum32bitfieldName[32:36],
	Enum32bitfieldE2P9:  _Enum32bitfieldName[36:40],
	Enum32bitfieldE2P10: _Enum32bitfieldName[40:45],
	Enum32bitfieldE2P11: _Enum32bitfieldName[45:50],
	Enum32bitfieldE2P12: _Enum32bitfieldName[50:55],
	Enum32bitfieldE2P13: _Enum32bitfieldName[55:60],
	Enum32bitfieldE2P14: _Enum32bitfieldName[60:65],
	Enum32bitfieldE2P15: _Enum32bitfieldName[65:70],
	Enum32bitfieldE2P16: _Enum32bitfieldName[70:75],
	Enum32bitfieldE2P17: _Enum32bitfieldName[75:80],
	Enum32bitfieldE2P18: _Enum32bitfieldName[80:85],
	Enum32bitfieldE2P19: _Enum32bitfieldName[85:90],
	Enum32bitfieldE2P20: _Enum32bitfieldName[90:95],
	Enum32bitfieldE2P21: _Enum32bitfieldName[95:100],
	Enum32bitfieldE2P22: _Enum32bitfieldName[100:105],
	Enum32bitfieldE2P23: _Enum32bitfieldName[105:110],
	Enum32bitfieldE2P24: _Enum32bitfieldName[110:115],
	Enum32bitfieldE2P25: _Enum32bitfieldName[115:120],
	Enum32bitfieldE2P26: _Enum32bitfieldName[120:125],
	Enum32bitfieldE2P27: _Enum32bitfieldName[125:130],
	Enum32bitfieldE2P28: _Enum32bitfieldName[130:135],
	Enum32bitfieldE2P29: _Enum32bitfieldName[135:140],
	Enum32bitfieldE2P30: _Enum32bitfieldName[140:145],
	Enum32bitfieldE2P31: _Enum32bitfieldName[145:150],
}

// String implements the Stringer interface.
func (x Enum32bitfield) String() string {
	if str, ok := _Enum32bitfieldMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Enum32bitfield(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Enum32bitfield) IsValid() bool {
	_, ok := _Enum32bitfieldMap[x]
	return ok
}

var _Enum32bitfieldValue = map[string]Enum32bitfield{
	_Enum32bitfieldName[0:4]:     Enum32bitfieldE2P0,
	_Enum32bitfieldName[4:8]:     Enum32bitfieldE2P1,
	_Enum32bitfieldName[8:12]:    Enum32bitfieldE2P2,
	_Enum32bitfieldName[12:16]:   Enum32bitfieldE2P3,
	_Enum32bitfieldName[16:20]:   Enum32bitfieldE2P4,
	_Enum32bitfieldName[20:24]:   Enum32bitfieldE2P5,
	_Enum32bitfieldName[24:28]:   Enum32bitfieldE2P6,
	_Enum32bitfieldName[28:32]:   Enum32bitfieldE2P7,
	_Enum32bitfieldName[32:36]:   Enum32bitfieldE2P8,
	_Enum32bitfieldName[36:40]:   Enum32bitfieldE2P9,
	_Enum32bitfieldName[40:45]:   Enum32bitfieldE2P10,
	_Enum32bitfieldName[45:50]:   Enum32bitfieldE2P11,
	_Enum32bitfieldName[50:55]:   Enum32bitfieldE2P12,
	_Enum32bitfieldName[55:60]:   Enum32bitfieldE2P13,
	_Enum32bitfieldName[60:65]:   Enum32bitfieldE2P14,
	_Enum32bitfieldName[65:70]:   Enum32bitfieldE2P15,
	_Enum32bitfieldName[70:75]:   Enum32bitfieldE2P16,
	_Enum32bitfieldName[75:80]:   Enum32bitfieldE2P17,
	_Enum32bitfieldName[80:85]:   Enum32bitfieldE2P18,
	_Enum32bitfieldName[85:90]:   Enum32bitfieldE2P19,
	_Enum32bitfieldName[90:95]:   Enum32bitfieldE2P20,
	_Enum32bitfieldName[95:100]:  Enum32bitfieldE2P21,
	_Enum32bitfieldName[100:105]: Enum32bitfieldE2P22,
	_Enum32bitfieldName[105:110]: Enum32bitfieldE2P23,
	_Enum32bitfieldName[110:115]: Enum32bitfieldE2P24,
	_Enum32bitfieldName[115:120]: Enum32bitfieldE2P25,
	_Enum32bitfieldName[120:125]: Enum32bitfieldE2P26,
	_Enum32bitfieldName[125:130]: Enum32bitfieldE2P27,
	_Enum32bitfieldName[130:135]: Enum32bitfieldE2P28,
	_Enum32bitfieldName[135:140]: Enum32bitfieldE2P29,
	_Enum32bitfieldName[140:145]: Enum32bitfieldE2P30,
	_Enum32bitfieldName[145:150]: Enum32bitfieldE2P31,
}

// ParseEnum32bitfield attempts to convert a string to a Enum32bitfield.
func ParseEnum32bitfield(name string) (Enum32bitfield, error) {
	if x, ok := _Enum32bitfieldValue[name]; ok {
		return x, nil
	}
	return Enum32bitfield(0), fmt.Errorf("%s is %w", name, ErrInvalidEnum32bitfield)
}
